---
import "@astrojs/site-kit/tailwind.css"
import "@fontsource/inter/variable.css"
import "../styles/fonts.css"

import Inter from "@fontsource/inter/files/inter-latin-variable-wghtOnly-normal.woff2"
import houstonHappy from "../assets/houston_happy.webp"
import houstonOmg from "../assets/houston_omg.webp"
import Card from "../components/Card.astro"
import Header from "../components/Header.astro"
import Hero from "../components/Hero.astro"
import type { ExampleGroup } from "../data/examples.js"
import { joinPath } from "../utils/path.js"

export type Props = {
	examples: Map<string, ExampleGroup>
	currentExample?: string | undefined
	basePath: string
}

const currentExample = Astro.props.currentExample || "getting-started"
const exampleGroup = Astro.props.examples.get(currentExample)
if (!exampleGroup) {
	throw new Error(`No examples found for "${currentExample}"`)
}

const pathname = Astro.url.pathname.replace(/\/$/, "")
---

<html lang="en" class="overflow-x-hidden bg-astro-gray-700 text-astro-gray-100">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="alternate icon" type="image/x-icon" href="/favicon.ico" />
		<link
			rel="preload"
			href="/fonts/Obviously/Obviously Normal/Web/Obviously-Regular.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link
			rel="preload"
			href="/fonts/MD IO/Web/MDIO0.5-Regular.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link rel="preload" href={Inter} as="font" type="font/woff2" crossorigin />
		<link
			rel="preload"
			href={houstonOmg}
			as="image"
			type="image/webp"
			crossorigin
		/>

		<title>astro.new{pathname}</title>
		<meta
			name="description"
			content="Quickly launch example Astro projects in your favorite browser IDE!"
		/>

		<!-- Fathom - beautiful, simple website analytics -->
		<script
			src="https://certain-quality.astro.build/script.js"
			data-site="EZBHTSIG"
			defer
		></script>
	</head>

	<body>
		<Header />

		<div class="noise-container overflow-x-hidden">
			<div class="noise"></div>

			<div class="relative">
				<div
					class="noise-underlay bg-grid absolute inset-0 mask-linear-gradient-to-b"
				>
				</div>
				<div class="container">
					<Hero />
				</div>
			</div>

			<div
				class="noise-underlay absolute left-0 top-[350px] h-[600px] w-[calc(max(50vw,300px))] -translate-y-1/2 translate-x-[-60%] rounded-full bg-blue-purple-gradient opacity-75 mask-radial-gradient"
			>
			</div>
			<div
				class="noise-underlay absolute right-0 top-[350px] h-[600px] w-[calc(max(50vw,300px))] -translate-y-1/2 translate-x-[60%] rounded-full bg-orange-yellow-gradient opacity-75 mask-radial-gradient"
			>
			</div>

			<main class="container">
				<nav class="flex flex-wrap border-b border-astro-gray-500">
					{
						[...Astro.props.examples.values()].map((group) => (
							<a
								href={joinPath(Astro.props.basePath, group.slug)}
								data-active={group.slug === currentExample || undefined}
								class="from-astro-blue/50 inline-block rounded-t-lg to-emerald-300/50 px-4 py-2 text-sm transition hover:backdrop-brightness-50 data-[active]:bg-gradient-to-tr"
							>
								{group.title}
							</a>
						))
					}
				</nav>

				<ul class="mt-8 grid gap-4 sm:grid-cols-2 lg:grid-cols-3 lg:gap-6">
					{
						exampleGroup.items.map((example) => (
							<li>
								<Card {...example} />
							</li>
						))
					}
				</ul>

				<section>
					<img src={houstonHappy} alt="" />
					<h2>Houston, we have resources</h2>
				</section>
			</main>
		</div>
	</body>
</html>

<style>
	.container {
		@apply mx-auto max-w-screen-xl px-4 md:px-8;
	}
	.bg-radial-gradient {
		background-image: radial-gradient(closest-side, var(--tw-gradient-stops));
	}
</style>

<style is:global>
	:focus {
		outline: none;
	}
	:focus-visible {
		@apply ring-2 ring-astro-purple;
	}
</style>

<script>
	// find all internal links, this will pickup all redirects handled by the redirect function
	document
		.querySelectorAll<HTMLAnchorElement>("a[href^='/']")
		.forEach((link) => {
			link.addEventListener("click", () => {
				/** @ts-ignore */
				window.fathom.trackPageview({
					url: link.href,
				})
			})
		})
</script>
